// Test ExternalMergeSort using a randomly generated file

#include "Util.h"
#include "ExternalMergeSort.h"

#include <iostream>
#include <cstdlib>
#include <string>
#include <fstream>

using namespace std;
using namespace ems;

//Input and output files generated by the test
string inputFileName;
string outputFileName;

//Remove all temporary files
void cleanup() {
  if (!inputFileName.empty()) remove(inputFileName.c_str());
  inputFileName.clear();
  if (!outputFileName.empty()) remove(outputFileName.c_str());
  outputFileName.clear();
}

int main(int argc, char** argv)
{
  try {
    //Find an available input filename
    inputFileName = Util::findAvailableFileName("testsort_input");
    if (inputFileName.empty()) return 1;

    //Find an available output filename
    outputFileName = Util::findAvailableFileName("testsort_output");
    if (outputFileName.empty()) return 1;

    //Create the input file
    if (!Util::createRandomFile(inputFileName,1000,1000)) {
      cleanup();
      return 1;
    }

    //Perform the sort
    ExternalMergeSort mergeSort;
    mergeSort.setInputFileName(inputFileName.c_str());
    mergeSort.setOutputFileName(outputFileName.c_str());
    mergeSort.setDataSizePerThread(100);
    mergeSort.setNumMergesPerThread(4);
    if (!mergeSort.sort()) {
      cleanup();
      return 1;
    }

    //Check the result
    if (!Util::checkSortedFile(outputFileName)) {
      cleanup();
      return 1;
    }
  }
  catch (...) {
    cleanup();
    throw;
  }
  return 0;
}

